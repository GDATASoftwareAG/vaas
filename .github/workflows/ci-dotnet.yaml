name: vaas-dotnet-ci
on:
  push:
    branches:
      - main
    paths:
      - "dotnet/**"
      - ".github/workflows/ci-dotnet.yaml"
    tags:
      - "cs*"
  pull_request:
    branches:
      - main
    paths:
      - "dotnet/**"
      - ".github/workflows/ci-dotnet.yaml"
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: "Test environment"
        options:
          - production
          - staging
          - develop
        default: "production"

env:
  CLIENT_ID: ${{ secrets.CLIENT_ID }}
  CLIENT_SECRET: ${{secrets.CLIENT_SECRET}}
  VAAS_URL: "wss://gateway.production.vaas.gdatasecurity.de"
  TOKEN_URL: "https://account.gdata.de/realms/vaas-production/protocol/openid-connect/token"
  VAAS_CLIENT_ID: ${{ secrets.VAAS_CLIENT_ID }}
  VAAS_USER_NAME: ${{ secrets.VAAS_USER_NAME }}
  VAAS_PASSWORD: ${{secrets.VAAS_PASSWORD}}

jobs:
  build-dotnet:
    name: Build & Test C# SDK
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: ["8.0.x"]

    steps:
      - uses: actions/checkout@v4

      - name: Scan for Viruses
        uses: ./.github/actions/vaas-scan-action
        with:
          VAAS_CLIENT_ID: ${{ secrets.VAAS_SCAN_CLIENT_ID }}
          VAAS_CLIENT_SECRET: ${{ secrets.VAAS_SCAN_CLIENT_SECRET }}

      - name: set staging environment
        if: (inputs.environment == 'staging' || (startsWith(github.ref, 'refs/tags/cs') && endsWith(github.ref, '-beta')))
        run: |
          echo "CLIENT_ID=${{ secrets.STAGING_CLIENT_ID }}" >> $GITHUB_ENV
          echo "CLIENT_SECRET=${{ secrets.STAGING_CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "VAAS_URL=wss://gateway.staging.vaas.gdatasecurity.de" >> $GITHUB_ENV
          echo "TOKEN_URL=https://account-staging.gdata.de/realms/vaas-staging/protocol/openid-connect/token" >> $GITHUB_ENV
          echo "VAAS_CLIENT_ID=${{ secrets.STAGING_VAAS_CLIENT_ID }}" >> $GITHUB_ENV
          echo "VAAS_USER_NAME=${{ secrets.STAGING_VAAS_USER_NAME }}" >> $GITHUB_ENV
          echo "VAAS_PASSWORD=${{ secrets.STAGING_VAAS_PASSWORD }}" >> $GITHUB_ENV

      - name: set develop environment
        if: (inputs.environment == 'develop' || (startsWith(github.ref, 'refs/tags/cs') && endsWith(github.ref, '-alpha')))
        run: |
          echo "CLIENT_ID=${{ secrets.DEVELOP_CLIENT_ID }}" >> $GITHUB_ENV
          echo "CLIENT_SECRET=${{ secrets.DEVELOP_CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "VAAS_URL=wss://gateway.develop.vaas.gdatasecurity.de" >> $GITHUB_ENV
          echo "TOKEN_URL=https://account-staging.gdata.de/realms/vaas-develop/protocol/openid-connect/token" >> $GITHUB_ENV
          echo "VAAS_CLIENT_ID=${{ secrets.DEVELOP_VAAS_CLIENT_ID }}" >> $GITHUB_ENV
          echo "VAAS_USER_NAME=${{ secrets.DEVELOP_VAAS_USER_NAME }}" >> $GITHUB_ENV
          echo "VAAS_PASSWORD=${{ secrets.DEVELOP_VAAS_PASSWORD }}" >> $GITHUB_ENV

      - name: Setup .NET Core SDK ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: Install dependencies
        run: dotnet restore
        working-directory: dotnet/Vaas

      - name: extract version
        if: startsWith(github.ref, 'refs/tags/cs')
        run: |
          echo "RELEASE_VERSION=${GITHUB_REF#refs/*/cs}" >> $GITHUB_ENV
          echo $RELEASE_VERSION

      - name: set version
        if: startsWith(github.ref, 'refs/tags/cs')
        run: |
          sed -i "s/<Version>0\.0\.0/<Version>$RELEASE_VERSION/g" ./dotnet/Vaas/src/Vaas/Vaas.csproj

      - name: Build
        run: dotnet build --configuration Release --no-restore
        working-directory: dotnet/Vaas

      - name: Test
        run: dotnet test --no-restore --verbosity normal
        working-directory: dotnet/Vaas

      - name: Run example FileScan
        env:
          SCAN_PATH: "Program.cs"
        run: dotnet run FileScan
        working-directory: dotnet/examples/VaasExample

      - name: Run example UrlScan
        run: dotnet run UrlScan
        working-directory: dotnet/examples/VaasExample

      - name: Run example HashsumScan
        run: dotnet run HashsumScan
        working-directory: dotnet/examples/VaasExample

      - name: Pack
        if: startsWith(github.ref, 'refs/tags/cs')
        run: dotnet pack -c Release src/Vaas
        working-directory: dotnet/Vaas

      - name: Push to nuget
        if: startsWith(github.ref, 'refs/tags/cs')
        env:
          NUGET_KEY: ${{ secrets.NUGET_KEY }}
          NUGET_FEED: https://api.nuget.org/v3/index.json
        run: dotnet nuget push src/Vaas/bin/Release/*.nupkg --skip-duplicate  --source $NUGET_FEED --api-key $NUGET_KEY
        working-directory: dotnet/Vaas

      - name: Microsoft Teams Notification
        uses: skitionek/notify-microsoft-teams@master
        if: failure()
        with:
          webhook_url: ${{ secrets.MSTEAMS_WEBHOOK }}
          overwrite: "{title: `Failed workflow on for VaaS-SDK ${workflow}`, sections: [{activityTitle: 'build failed', activitySubtitle: `Failed workflow on for VaaS-SDK ${workflow}`, activityImage: 'https://adaptivecards.io/content/cats/3.png'}], themeColor: '#ff0000'}"

  codeql:
    runs-on: ubuntu-latest
    timeout-minutes: 360
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: csharp

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:csharp"

      - name: Microsoft Teams Notification
        uses: skitionek/notify-microsoft-teams@master
        if: failure()
        with:
          webhook_url: ${{ secrets.MSTEAMS_WEBHOOK }}
          overwrite: "{title: `Failed codeql on for VaaS-SDK ${workflow}`, sections: [{activityTitle: 'build failed', activitySubtitle: `Failed workflow on for VaaS-SDK ${workflow}`, activityImage: 'https://adaptivecards.io/content/cats/3.png'}], themeColor: '#ff0000'}"
