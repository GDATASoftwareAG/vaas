name: vaas-ci
on:
  push:
    branches:
      - main
    tags:
      - "*"
  pull_request:
    branches:
      - main

jobs:
  build-java:
    name: Build & Test Java SDK
    runs-on: ubuntu-20.04
    env:
      VAAS_TOKEN: ${{ secrets.VAAS_TOKEN }}

    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: install Java
        uses: actions/setup-java@v2
        with:
          java-version: "17"
          distribution: "adopt"

      - name: setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: "7.2"

      - name: run tests
        uses: gradle/gradle-build-action@v2
        with:
          arguments: test
          gradle-version: "7.2"
          build-root-directory: java

  build-php:
    name: Build & Test PHP SDK
    runs-on: ubuntu-20.04
    env:
      VAAS_TOKEN: ${{ secrets.VAAS_TOKEN }}

    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: setup PHP with PECL extension
        uses: shivammathur/setup-php@v2
        with:
          php-version: "7.4"

      - name: install php dependencies
        uses: php-actions/composer@v6
        with:
          working_dir: php/tests/vaas

      - name: run tests
        run: ./vendor/bin/phpunit --colors --testdox
        working-directory: php/tests/vaas

  build-typescript:
    name: Build & Test TypeScript SDK
    runs-on: ubuntu-20.04
    env:
      VAAS_TOKEN: ${{ secrets.VAAS_TOKEN }}
      NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    steps:
      - name: checkout
        uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: "16"
          registry-url: "https://registry.npmjs.org"

      - name: install dependencies
        run: npm ci
        working-directory: typescript

      - name: build
        run: npm run build
        working-directory: typescript

      - name: run tests
        run: npm run test
        working-directory: typescript

      - name: extract version
        if: startsWith(github.ref, 'refs/tags/ts')
        run: |
          echo "RELEASE_VERSION=${GITHUB_REF#refs/*/ts}" >> $GITHUB_ENV
          echo $RELEASE_VERSION

      - name: set version
        if: startsWith(github.ref, 'refs/tags/ts')
        run: |
          sed -i "s/\"version\": \"0.0.0\"/\"version\": \"$RELEASE_VERSION\"/g" ./typescript/package.json

      - name: publish npm package
        if: startsWith(github.ref, 'refs/tags/ts')
        run: npm publish
        working-directory: typescript

  build-rust:
    name: Build & Test Rust SDK
    runs-on: ubuntu-20.04
    env:
      VAAS_TOKEN: ${{ secrets.VAAS_TOKEN }}
      CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: install Rust stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: run tests
        run: cargo test
        working-directory: rust

      - name: extract version
        if: startsWith(github.ref, 'refs/tags/rust')
        run: |
          echo "RELEASE_VERSION=${GITHUB_REF#refs/*/rust}" >> $GITHUB_ENV
          echo $RELEASE_VERSION

      - name: set version
        if: startsWith(github.ref, 'refs/tags/rust')
        run: |
          sed -i "s/version = \"0.0.0\"/version = \"$RELEASE_VERSION\"/g" ./rust/Cargo.toml

      - name: publish crates.io package
        if: startsWith(github.ref, 'refs/tags/rust')
        run: cargo publish
        working-directory: rust

  build-python:
    name: Build & Test Python SDK
    runs-on: ubuntu-20.04
    env:
      VAAS_TOKEN: ${{ secrets.VAAS_TOKEN }}
    steps:
      - uses: actions/checkout@v3
      - name: set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.x
      - name: install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        working-directory: python
      - name: run tests
        run: python test.py
        working-directory: python

      - name: extract version
        if: startsWith(github.ref, 'refs/tags/py')
        run: |
          echo "RELEASE_VERSION=${GITHUB_REF#refs/*/py}" >> $GITHUB_ENV
          echo $RELEASE_VERSION

      - name: set version
        if: startsWith(github.ref, 'refs/tags/py')
        run: |
          sed -i "s/version = 0.0.0/version = $RELEASE_VERSION/g" ./python/setup.cfg
          cat ./python/setup.cfg

      - name: build wheel
        run: python -m build
        working-directory: python

      - name: publish a Python distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        if: startsWith(github.ref, 'refs/tags/py')
        with:
          packages_dir: python/dist
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
