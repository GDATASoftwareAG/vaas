name: vaas-ci
on:
  push:
    branches:
      - main
    tags:
      - "*"
  pull_request:
    branches:
      - main

jobs:
  build-java:
    name: Build & Test Java SDK
    runs-on: ubuntu-20.04

    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: install Java
        uses: actions/setup-java@v2
        with:
          java-version: "17"
          distribution: "adopt"

      - name: setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: "7.2"

      - name: run tests
        if: github.ref == 'refs/heads/main'
        env:
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          VAAS_URL: "wss://gateway-vaas.gdatasecurity.de"
          TOKEN_URL: "https://keycloak-vaas.gdatasecurity.de/realms/vaas/protocol/openid-connect/token"
        uses: gradle/gradle-build-action@v2
        with:
          arguments: test
          gradle-version: "7.2"
          build-root-directory: java

      - name: run tests staging
        if: github.ref != 'refs/heads/main'
        env:
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.STAGING_CLIENT_SECRET }}
          VAAS_URL: "wss://staging-gateway-vaas.gdatasecurity.de"
          TOKEN_URL: "https://staging-keycloak-vaas.gdatasecurity.de/realms/vaas/protocol/openid-connect/token"
        uses: gradle/gradle-build-action@v2
        with:
          arguments: test
          gradle-version: "7.2"
          build-root-directory: java

      - name: publish Maven package
        if: startsWith(github.ref, 'refs/tags/java')
        uses: samuelmeuli/action-maven-publish@v1
        directory: java
        with:
          nexus_username: ${{ secrets.NEXUS_USER }}
          nexus_password: ${{ secrets.NEXUS_PASSWORD }}

  build-php:
    name: Build & Test PHP SDK
    runs-on: ubuntu-20.04

    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: setup PHP with PECL extension
        uses: shivammathur/setup-php@v2
        with:
          php-version: "7.4"

      - name: install php dependencies
        uses: php-actions/composer@v6
        with:
          working_dir: php/tests/vaas

      - name: run tests
        if: github.ref == 'refs/heads/main'
        env:
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          VAAS_URL: "wss://gateway-vaas.gdatasecurity.de"
          TOKEN_URL: "https://keycloak-vaas.gdatasecurity.de/realms/vaas/protocol/openid-connect/token"
        run: ./vendor/bin/phpunit --colors --testdox
        working-directory: php/tests/vaas

      - name: run tests staging
        if: github.ref != 'refs/heads/main'
        env:
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.STAGING_CLIENT_SECRET }}
          VAAS_URL: "wss://staging-gateway-vaas.gdatasecurity.de"
          TOKEN_URL: "https://staging-keycloak-vaas.gdatasecurity.de/realms/vaas/protocol/openid-connect/token"
        run: ./vendor/bin/phpunit --colors --testdox
        working-directory: php/tests/vaas

  build-typescript:
    name: Build & Test TypeScript SDK
    runs-on: ubuntu-20.04

    steps:
      - name: checkout
        uses: actions/checkout@v2

      - uses: pnpm/action-setup@v2.0.1
        name: install pnpm
        id: pnpm-install
        with:
          version: 7
          run_install: false

      - uses: actions/setup-node@v3
        name: setup node
        with:
          node-version: 18
          registry-url: "https://registry.npmjs.org"
          cache: "pnpm"
          cache-dependency-path: "typescript/pnpm-lock.yaml"

      - name: install dependencies
        run: pnpm install --frozen-lockfile
        working-directory: typescript

      - name: build
        run: pnpm run build
        working-directory: typescript

      - name: run tests
        if: github.ref == 'refs/heads/main'
        env:
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          VAAS_URL: "wss://gateway-vaas.gdatasecurity.de"
          TOKEN_URL: "https://keycloak-vaas.gdatasecurity.de/realms/vaas/protocol/openid-connect/token"
        run: pnpm run test
        working-directory: typescript

      - name: run tests staging
        if: github.ref != 'refs/heads/main'
        env:
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.STAGING_CLIENT_SECRET }}
          VAAS_URL: "wss://staging-gateway-vaas.gdatasecurity.de"
          TOKEN_URL: "https://staging-keycloak-vaas.gdatasecurity.de/realms/vaas/protocol/openid-connect/token"
        run: pnpm run test
        working-directory: typescript

      - name: extract version
        if: startsWith(github.ref, 'refs/tags/ts')
        run: |
          echo "RELEASE_VERSION=${GITHUB_REF#refs/*/ts}" >> $GITHUB_ENV
          echo $RELEASE_VERSION

      - name: set version
        if: startsWith(github.ref, 'refs/tags/ts')
        run: |
          sed -i "s/\"version\": \"0.0.0\"/\"version\": \"$RELEASE_VERSION\"/g" ./typescript/package.json

      - name: publish npm package
        if: startsWith(github.ref, 'refs/tags/ts')
        run: npm publish
        working-directory: typescript
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  build-rust:
    name: Build & Test Rust SDK
    runs-on: ubuntu-20.04

    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: install Rust stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - uses: Swatinem/rust-cache@v1
        with:
          working-directory: rust

      - name: run tests
        if: github.ref == 'refs/heads/main'
        env:
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          VAAS_URL: "wss://gateway-vaas.gdatasecurity.de"
          TOKEN_URL: "https://keycloak-vaas.gdatasecurity.de/realms/vaas/protocol/openid-connect/token"
        run: cargo test
        working-directory: rust

      - name: run tests staging
        if: github.ref != 'refs/heads/main'
        env:
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.STAGING_CLIENT_SECRET }}
          VAAS_URL: "wss://staging-gateway-vaas.gdatasecurity.de"
          TOKEN_URL: "https://staging-keycloak-vaas.gdatasecurity.de/realms/vaas/protocol/openid-connect/token"
        run: cargo test
        working-directory: rust

      - name: extract version
        if: startsWith(github.ref, 'refs/tags/rs')
        run: |
          echo "RELEASE_VERSION=${GITHUB_REF#refs/*/rs}" >> $GITHUB_ENV
          echo $RELEASE_VERSION

      - name: set version
        if: startsWith(github.ref, 'refs/tags/rs')
        run: |
          sed -i "s/version = \"0.0.0\"/version = \"$RELEASE_VERSION\"/g" ./rust/Cargo.toml

      - name: publish crates.io package
        if: startsWith(github.ref, 'refs/tags/rs')
        run: cargo publish --allow-dirty
        working-directory: rust

  build-python:
    name: Build & Test Python SDK
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v3
      - name: set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.x
      - name: install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        working-directory: python

      - name: run tests
        if: github.ref == 'refs/heads/main'
        env:
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          VAAS_URL: "wss://gateway-vaas.gdatasecurity.de"
          TOKEN_URL: "https://keycloak-vaas.gdatasecurity.de/realms/vaas/protocol/openid-connect/token"
        run: python test.py
        working-directory: python

      - name: run tests
        if: github.ref != 'refs/heads/main'
        env:
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.STAGING_CLIENT_SECRET }}
          VAAS_URL: "wss://staging-gateway-vaas.gdatasecurity.de"
          TOKEN_URL: "https://staging-keycloak-vaas.gdatasecurity.de/realms/vaas/protocol/openid-connect/token"
        run: python test.py
        working-directory: python

      - name: extract version
        if: startsWith(github.ref, 'refs/tags/py')
        run: |
          echo "RELEASE_VERSION=${GITHUB_REF#refs/*/py}" >> $GITHUB_ENV
          echo $RELEASE_VERSION

      - name: set version
        if: startsWith(github.ref, 'refs/tags/py')
        run: |
          sed -i "s/version = 0.0.0/version = $RELEASE_VERSION/g" ./python/setup.cfg
          cat ./python/setup.cfg

      - name: build wheel
        run: python -m build
        working-directory: python

      - name: publish a Python distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        if: startsWith(github.ref, 'refs/tags/py')
        with:
          packages_dir: python/dist
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}

  build-dotnet:
    name: Build & Test C# SDK
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: ["6.0.x"]

    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET Core SDK ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
      - name: Install dependencies
        run: dotnet restore
        working-directory: dotnet/Vaas
      - name: Build
        run: dotnet build --configuration Release --no-restore
        working-directory: dotnet/Vaas
      - name: Test
        if: github.ref == 'refs/heads/main'
        env:
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          VAAS_URL: "wss://gateway-vaas.gdatasecurity.de"
          TOKEN_URL: "https://keycloak-vaas.gdatasecurity.de/realms/vaas/protocol/openid-connect/token"
        run: dotnet test --no-restore --verbosity normal
        working-directory: dotnet/Vaas
      - name: Test staging
        if: github.ref != 'refs/heads/main'
        env:
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.STAGING_CLIENT_SECRET }}
          VAAS_URL: "wss://staging-gateway-vaas.gdatasecurity.de"
          TOKEN_URL: "https://staging-keycloak-vaas.gdatasecurity.de/realms/vaas/protocol/openid-connect/token"
        run: dotnet test --no-restore --verbosity normal
        working-directory: dotnet/Vaas
