name: vaas-python-ci
on:
  push:
    branches:
      - main
    paths:
      - "python/**"
      - ".github/workflows/ci-python.yaml"
    tags:
      - "*"
  pull_request:
    branches:
      - main
    paths:
      - "python/**"
      - ".github/workflows/ci-python.yaml"

jobs:
  build-python:
    name: Build & Test Python SDK
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v3
      - name: set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.x
      - name: install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        working-directory: python

      - name: run tests
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/py')
        env:
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          VAAS_URL: "wss://gateway-vaas.gdatasecurity.de"
          TOKEN_URL: "https://keycloak-vaas.gdatasecurity.de/realms/vaas/protocol/openid-connect/token"
        run: python -m unittest -v tests/test_*
        working-directory: python

      - name: run tests staging
        if: github.ref != 'refs/heads/main' && !startsWith(github.ref, 'refs/tags/py')
        env:
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.STAGING_CLIENT_SECRET }}
          VAAS_URL: "wss://staging-gateway-vaas.gdatasecurity.de"
          TOKEN_URL: "https://staging-keycloak-vaas.gdatasecurity.de/realms/vaas/protocol/openid-connect/token"
        run: python -m unittest -v tests/test_*
        working-directory: python

      - name: install example requirements
        run: pip install -r requirements.txt
        working-directory: python/examples/VaasExample

      - name: run example
        env:
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          SCAN_PATH: "main.py"
        run: python main.py
        working-directory: python/examples/VaasExample

      - name: extract version
        if: startsWith(github.ref, 'refs/tags/py')
        run: |
          echo "RELEASE_VERSION=${GITHUB_REF#refs/*/py}" >> $GITHUB_ENV
          echo $RELEASE_VERSION

      - name: set version
        if: startsWith(github.ref, 'refs/tags/py')
        run: |
          sed -i "s/version = 0.0.0/version = $RELEASE_VERSION/g" ./python/setup.cfg
          cat ./python/setup.cfg

      - name: build wheel
        run: python -m build
        working-directory: python

      - name: publish a Python distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        if: startsWith(github.ref, 'refs/tags/py')
        with:
          packages_dir: python/dist
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
